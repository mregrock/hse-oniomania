version: '3.8'

networks:
  app_network:
    driver: bridge

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    container_name: zookeeper
    platform: linux/amd64
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      KAFKA_HEAP_OPTS: "-Xms256m -Xmx256m"
    networks:
      - app_network

  kafka:
    image: confluentinc/cp-kafka:7.0.1
    container_name: kafka
    platform: linux/amd64
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_INTERNAL://0.0.0.0:29092
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_HEAP_OPTS: "-Xms1g -Xmx1g"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - app_network

  postgres-orders:
    image: postgres:14-alpine
    container_name: postgres-orders
    ports:
      - "5435:5432"
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: orders_db
    volumes:
      - postgres_orders_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d orders_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app_network

  postgres-payments:
    image: postgres:14-alpine
    container_name: postgres-payments
    ports:
      - "5434:5432"
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: payments_db
    volumes:
      - postgres_payments_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d payments_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app_network

  payments-service:
    build:
      context: ./payments-service
      dockerfile: Dockerfile
    container_name: payments-service
    depends_on:
      kafka:
        condition: service_healthy
      postgres-payments:
        condition: service_healthy
    ports:
      - "8081:8080"
    environment:
      - DB_HOST=postgres-payments
      - DB_PORT=5432
      - DB_NAME=payments_db
      - DB_USER=user
      - DB_PASSWORD=password
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
    networks:
      - app_network

  order-service:
    build:
      context: ./order-service
      dockerfile: Dockerfile
    container_name: order-service
    depends_on:
      kafka:
        condition: service_healthy
      postgres-orders:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      - DB_HOST=postgres-orders
      - DB_PORT=5432
      - DB_NAME=orders_db
      - DB_USER=user
      - DB_PASSWORD=password
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
    networks:
      - app_network

  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: api-gateway
    ports:
      - "8088:8088"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - app_network

volumes:
  postgres_orders_data:
  postgres_payments_data:
